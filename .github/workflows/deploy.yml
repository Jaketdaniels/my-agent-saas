on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    name: Deploy to Cloudflare Workers
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # We need to fetch all the history in order to get the updated date for...
          # ... the blog posts and sitemap.
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'pnpm'

      # Enhanced pnpm store caching with better key strategy
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Cache node_modules for faster dependency resolution
      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .pnpm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-node-modules-

      # Cache Next.js build output with intelligent invalidation
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/server
            .next/static
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.css') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.css') }}-
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-

      # Cache TypeScript build info for faster type checking
      - name: Cache TypeScript build
        uses: actions/cache@v4
        with:
          path: |
            tsconfig.tsbuildinfo
            **/*.tsbuildinfo
          key: ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json', '**/tsconfig.*.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json', '**/tsconfig.*.json') }}-
            ${{ runner.os }}-typescript-

      # Cache ESLint for faster linting
      - name: Cache ESLint
        uses: actions/cache@v4
        with:
          path: |
            .eslintcache
            node_modules/.cache/eslint
          key: ${{ runner.os }}-eslint-${{ hashFiles('.eslintrc*', '**/.eslintrc*') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-eslint-${{ hashFiles('.eslintrc*', '**/.eslintrc*') }}-
            ${{ runner.os }}-eslint-

      # Cache Wrangler with better paths
      - name: Cache Wrangler
        uses: actions/cache@v4
        with:
          path: |
            ~/.wrangler
            ~/.cache/wrangler
            .wrangler
            node_modules/.cache/wrangler
          key: ${{ runner.os }}-wrangler-${{ hashFiles('wrangler.jsonc') }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-wrangler-${{ hashFiles('wrangler.jsonc') }}-
            ${{ runner.os }}-wrangler-

      # Clean only if caches miss or on specific conditions
      - name: Conditional cleanup
        run: |
          # Only clean OpenNext artifacts - Next.js cache can be reused
          rm -rf .open-next
          rm -rf .vercel
          
          # Clean Next.js only if cache restoration failed
          if [ ! -d ".next/cache" ]; then
            echo "Next.js cache not found, cleaning build directory"
            rm -rf .next
          fi

      - name: Create cache directories
        run: |
          mkdir -p ~/.wrangler
          mkdir -p ~/.cache/wrangler
          mkdir -p .wrangler
          mkdir -p node_modules/.cache/wrangler

      - name: Install dependencies
        run: |
          # Skip installation if node_modules exists and is valid
          if [ -d "node_modules" ] && [ -f "node_modules/.modules.yaml" ]; then
            echo "Valid node_modules found, running quick install check"
            pnpm install --frozen-lockfile --prefer-offline --ignore-scripts
          else
            echo "Installing dependencies from scratch"
            pnpm install --frozen-lockfile --prefer-offline
          fi

      - name: Set Docker platform for Cloudflare Containers
        run: |
          echo "DOCKER_DEFAULT_PLATFORM=linux/amd64" >> $GITHUB_ENV
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV
        
      - name: Verify Docker availability
        run: |
          docker --version
          docker info

      - name: Set D1 environment variables
        id: set-d1-vars
        run: |
          echo "D1_DATABASE_NAME=$(node scripts/get-db-name.mjs)" >> $GITHUB_ENV
          echo "D1_DATABASE_ID=$(node scripts/get-db-id.mjs)" >> $GITHUB_ENV

      # Report cache usage
      - name: Report cache status
        run: |
          echo "=== Cache Status Report ==="
          echo "Node modules cache: ${{ steps.node-modules-cache.outputs.cache-hit == 'true' && 'HIT' || 'MISS' }}"
          echo "Next.js directory size: $(du -sh .next 2>/dev/null | cut -f1 || echo 'Not found')"
          echo "Node modules size: $(du -sh node_modules 2>/dev/null | cut -f1 || echo 'Not found')"
          echo "=========================="

      - name: Migrate local D1 database
        run: pnpm run db:migrate:dev

      - name: Build OpenNext bundle with timing
        run: |
          echo "Starting build at $(date)"
          START_TIME=$SECONDS
          pnpm run opennext:build
          ELAPSED_TIME=$(($SECONDS - $START_TIME))
          echo "Build completed in ${ELAPSED_TIME} seconds"
        
      - name: Patch worker with Durable Object exports
        run: node scripts/patch-worker.js
        
        
      - name: Deploy with Wrangler directly  
        run: |
          echo "Deploying with wrangler to properly handle container build..."
          npx wrangler deploy -e production --compatibility-date 2025-03-01
        
        env:
          DATABASE_ID: ${{ env.D1_DATABASE_ID }}
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          # Here you can add env variables that will be available in Next.js
          # NEXT_PUBLIC_POSTHOG_KEY: ${{ vars.NEXT_PUBLIC_POSTHOG_KEY }}
          # NEXT_PUBLIC_POSTHOG_HOST: ${{ vars.NEXT_PUBLIC_POSTHOG_HOST }}
          NEXT_PUBLIC_TURNSTILE_SITE_KEY: ${{ vars.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ vars.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}

      - name: Run DB migrations
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 migrations apply ${{ env.D1_DATABASE_NAME }} --remote

      - name: Purge Cloudflare CDN cache
        if: ${{ vars.CLOUDFLARE_ZONE_ID != '' }}
        run: |
          echo "Purging Cloudflare cache..."
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ vars.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}' || echo "Cache purge failed, but deployment succeeded"

      # Post-deployment optimization
      - name: Post-deployment report
        if: always()
        run: |
          echo "=== Deployment Summary ==="
          echo "Workflow run: ${{ github.run_number }}"
          echo "Commit: ${{ github.sha }}"
          echo "Cache sizes:"
          du -sh ~/.pnpm-store 2>/dev/null || echo "pnpm store: not found"
          du -sh node_modules 2>/dev/null || echo "node_modules: not found"
          du -sh .next 2>/dev/null || echo ".next: not found"
          echo "=========================="
