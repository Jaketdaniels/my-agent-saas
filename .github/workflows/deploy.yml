on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    name: Deploy to Cloudflare Workers
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # We need to fetch all the history in order to get the updated date for...
          # ... the blog posts and sitemap.
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'pnpm'

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            ~/.cache/pnpm
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Remove Next.js cache - we need fresh builds in CI to avoid compatibility issues
      - name: Clean Next.js cache
        run: |
          rm -rf .next/cache
          rm -rf .next/.cache

      # Remove OpenNext cache to ensure fresh build in CI
      - name: Clean previous build artifacts
        run: |
          rm -rf .open-next
          rm -rf .vercel
          rm -rf .next

      - name: Cache Wrangler
        uses: actions/cache@v4
        with:
          path: |
            ~/.wrangler
            ~/.cache/wrangler
            .wrangler
            node_modules/.cache/wrangler
          key: ${{ runner.os }}-wrangler-${{ hashFiles('wrangler.jsonc') }}
          restore-keys: |
            ${{ runner.os }}-wrangler-

      - name: Create cache directories
        run: |
          mkdir -p ~/.wrangler
          mkdir -p ~/.cache/wrangler
          mkdir -p .wrangler
          mkdir -p node_modules/.cache/wrangler

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Set Docker platform for Cloudflare Containers
        run: |
          echo "DOCKER_DEFAULT_PLATFORM=linux/amd64" >> $GITHUB_ENV
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV
        
      - name: Verify Docker availability
        run: |
          docker --version
          docker info

      - name: Set D1 environment variables
        id: set-d1-vars
        run: |
          echo "D1_DATABASE_NAME=$(node scripts/get-db-name.mjs)" >> $GITHUB_ENV
          echo "D1_DATABASE_ID=$(node scripts/get-db-id.mjs)" >> $GITHUB_ENV

      - name: Migrate local D1 database
        run: pnpm run db:migrate:dev

      - name: Build OpenNext bundle
        run: pnpm run opennext:build
        
      - name: Patch worker with Durable Object exports
        run: node scripts/patch-worker.js
        
        
      - name: Deploy with Wrangler directly  
        run: |
          echo "Deploying with wrangler to properly handle container build..."
          npx wrangler deploy -e production --compatibility-date 2025-03-01
        
        env:
          DATABASE_ID: ${{ env.D1_DATABASE_ID }}
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          # Here you can add env variables that will be available in Next.js
          # NEXT_PUBLIC_POSTHOG_KEY: ${{ vars.NEXT_PUBLIC_POSTHOG_KEY }}
          # NEXT_PUBLIC_POSTHOG_HOST: ${{ vars.NEXT_PUBLIC_POSTHOG_HOST }}
          NEXT_PUBLIC_TURNSTILE_SITE_KEY: ${{ vars.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ vars.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}

      - name: Run DB migrations
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 migrations apply ${{ env.D1_DATABASE_NAME }} --remote

      - name: Purge Cloudflare CDN cache
        if: ${{ vars.CLOUDFLARE_ZONE_ID != '' }}
        run: |
          echo "Purging Cloudflare cache..."
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ vars.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}' || echo "Cache purge failed, but deployment succeeded"
